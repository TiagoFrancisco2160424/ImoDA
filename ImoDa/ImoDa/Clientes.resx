<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        B///wAf//8AH///AB///4A////Af//////8=
</value>
  </data>
</root>